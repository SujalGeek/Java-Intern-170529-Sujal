SPRING DATA JPA THEORY

1. WHAT IS JPA?

- JPA = Java Persistence API (a specification).
- Used for ORM (Object Relational Mapping).
- Maps Java classes (entities) to database tables.
- Defines how to persist, update, delete, and retrieve data.
- JPA itself does NOT provide implementation.

Popular Implementations:
- Hibernate (most widely used)
- EclipseLink
- OpenJPA

----------------------------

2. WHAT IS SPRING DATA JPA?
----------------------------
- Part of the Spring Data project.
- Provides abstraction over JPA.
- Reduces boilerplate code (no need for DAOs).
- Provides ready-made CRUD operations.
- Integrates with Hibernate by default.
- Auto-generates queries from method names.

----------------------------

3. CORE CONCEPTS OF JPA
----------------------------
- Entity: A Java class mapped to a table (annotated with @Entity).
- Entity Manager: Manages entities (persist, remove, find).
- Persistence Context: Cache/session where entities are managed.
- ORM Mapping:
    @Entity, @Table, @Column, @Id, @GeneratedValue
    Relationships: @OneToOne, @OneToMany, @ManyToOne, @ManyToMany
- JPQL: Query language similar to SQL but works with entities.

----------------------------

4. HOW SPRING DATA JPA WORKS
----------------------------
- Create Entity classes (@Entity).
- Create Repository interfaces extending JpaRepository.
- Spring generates implementations automatically.
- Use repositories in Service/Controller layers.
- Queries:
    a) Derived Queries (by method name).
    b) JPQL Queries (@Query).
    c) Native SQL Queries (@Query with nativeQuery=true).

----------------------------

5. JpaRepository INTERFACE
----------------------------
- Common methods:
    save(entity)
    findAll()
    findById(id)
    deleteById(id)
- Provides Paging and Sorting support.

----------------------------

6. TRANSACTIONS
----------------------------
- @Transactional annotation used for transaction management.
- Ensures data consistency.

----------------------------

7. ADVANTAGES OF SPRING DATA JPA
----------------------------
- No need to write DAO layer manually.
- Cleaner, faster development.
- Auto query generation.
- Pagination and sorting support.
- Easy integration with Spring Boot.

----------------------------

8. EXAMPLE FLOW
----------------------------
Step 1: Add Dependencies (Maven/Gradle)
    spring-boot-starter-data-jpa
    mysql-connector-j

Step 2: Configure application.properties
    spring.datasource.url=jdbc:mysql://localhost:3306/testdb
    spring.datasource.username=root
    spring.datasource.password=1234
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true

Step 3: Create Entity
    @Entity
    public class Product {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String name;
        private Double price;
    }

Step 4: Create Repository
    public interface ProductRepository extends JpaRepository<Product, Long> {
        List<Product> findByName(String name);
    }

Step 5: Use in Service
    @Service
    public class ProductService {
        @Autowired
        private ProductRepository repo;
        
        public List<Product> getAllProducts() {
            return repo.findAll();
        }
    }

Step 6: Use in Controller
    @RestController
    @RequestMapping("/products")
    public class ProductController {
        @Autowired
        private ProductService service;

        @GetMapping
        public List<Product> getProducts() {
            return service.getAllProducts();
        }
    }

----------------------------

9. SUMMARY
----------------------------
- JPA = Specification.
- Hibernate = Implementation.
- Spring Data JPA = Abstraction on top of JPA and Hibernate.
- Handles CRUD, queries, relationships, and transactions.
- Simplifies database interaction in Spring Boot projects.

